import React, { useState, useEffect, useRef, useCallback } from "react";
import Webcam from "react-webcam";
import * as tf from "@tensorflow/tfjs";
import * as poseDetection from "@tensorflow-models/pose-detection";

const ExerciseApp = () => {
  const webcamRef = useRef(null);
  const canvasRef = useRef(null);
  const [detector, setDetector] = useState(null);
  const [exerciseCount, setExerciseCount] = useState({
    pushups: 0,
    squats: 0,
  });
  const [currentExercise, setCurrentExercise] = useState("");
  const [pushupPosition, setPushupPosition] = useState("up");
  const [squatPosition, setSquatPosition] = useState("up");
  const isExerciseInProgressRef = useRef(false);

  const detectExercise = useCallback(
    (keypoints) => {
      if (!keypoints) return;

      const keypointsMap = {};
      keypoints.forEach((kp) => {
        keypointsMap[kp.name] = kp;
      });

      if (currentExercise === "Pushups") {
        detectPushup(keypointsMap);
      } else if (currentExercise === "Squats") {
        detectSquat(keypointsMap);
      }
    },
    [currentExercise]
  );

  useEffect(() => {
    const loadModel = async () => {
      await tf.ready();
      const detectorConfig = {
        modelType: poseDetection.movenet.modelType.SINGLEPOSE_LIGHTNING,
      };
      const moveNet = await poseDetection.createDetector(
        poseDetection.SupportedModels.MoveNet,
        detectorConfig
      );
      setDetector(moveNet);
      console.log("MoveNet model loaded!");
    };

    loadModel();
  }, []);

  const detectPose = useCallback(async () => {
    if (!detector || !webcamRef.current) return;

    const video = webcamRef.current.video;
    if (!video) return;

    const poses = await detector.estimatePoses(video, {
      flipHorizontal: false,
    });

    if (poses.length > 0) {
      console.log("Detected Pose:", poses[0]);
      drawPose(poses[0], 640, 480);
      detectExercise(poses[0].keypoints);
    }

    requestAnimationFrame(detectPose);
  }, [detectExercise, detector]);

  useEffect(() => {
    if (detector) {
      detectPose();
    }
  }, [detector, detectPose]);

  const detectPushup = (keypointsMap) => {
    const leftElbow = keypointsMap["left_elbow"];
    const rightElbow = keypointsMap["right_elbow"];
    const leftShoulder = keypointsMap["left_shoulder"];
    const rightShoulder = keypointsMap["right_shoulder"];
    const nose = keypointsMap["nose"];

    if (
      leftElbow &&
      rightElbow &&
      leftShoulder &&
      rightShoulder &&
      nose &&
      leftElbow.score > 0.2 &&
      rightElbow.score > 0.2 &&
      leftShoulder.score > 0.2 &&
      rightShoulder.score > 0.2 &&
      nose.score > 0.2
    ) {
      const isElbowsAboveShoulders =
        leftElbow.y < leftShoulder.y && rightElbow.y < rightShoulder.y;
      const isNoseBelowShoulders =
        nose.y > leftShoulder.y && nose.y > rightShoulder.y;

      setPushupPosition((prevPos) => {
        if (
          isElbowsAboveShoulders &&
          isNoseBelowShoulders &&
          prevPos !== "down"
        ) {
          console.log("Pushup: Down position detected");
          return "down";
        } else if (!isElbowsAboveShoulders && prevPos !== "up") {
          if (prevPos === "down" && !isExerciseInProgressRef.current) {
            setExerciseCount((prevCount) => ({
              ...prevCount,
              pushups: prevCount.pushups + 1,
            }));
            isExerciseInProgressRef.current = true;
          }

          console.log("Pushup: Up position detected");
          return "up";
        }

        return prevPos;
      });

      if (isElbowsAboveShoulders && isNoseBelowShoulders) {
        isExerciseInProgressRef.current = false;
      }
    }
  };

  const detectSquat = (keypointsMap) => {
    const leftKnee = keypointsMap["left_knee"];
    const rightKnee = keypointsMap["right_knee"];
    const leftHip = keypointsMap["left_hip"];
    const rightHip = keypointsMap["right_hip"];

    if (
      leftKnee &&
      rightKnee &&
      leftHip &&
      rightHip &&
      leftKnee.score > 0.2 &&
      rightKnee.score > 0.2 &&
      leftHip.score > 0.2 &&
      rightHip.score > 0.2
    ) {
      const isKneeBend = leftKnee.y < leftHip.y && rightKnee.y < rightHip.y;
      const isStanding = leftKnee.y > leftHip.y && rightKnee.y > rightHip.y;

      setSquatPosition((prevPos) => {
        if (isKneeBend) {
          return "down";
        } else if (isStanding && prevPos === "down") {
          setExerciseCount((prevCount) => ({
            ...prevCount,
            squats: prevCount.squats + 1,
          }));
          return "up";
        }
        return prevPos;
      });
    }
  };

  const drawPose = (pose, videoWidth, videoHeight) => {
    const ctx = canvasRef.current?.getContext("2d");
    if (!ctx) return;

    const canvas = canvasRef.current;
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    if (!pose || !pose.keypoints) return;

    const scaleX = canvas.width / videoWidth;
    const scaleY = canvas.height / videoHeight;

    const flippedKeypoints = pose.keypoints.map((keypoint) => ({
      ...keypoint,
      x: (videoWidth - keypoint.x) * scaleX,
      y: keypoint.y * scaleY,
    }));

    flippedKeypoints.forEach((keypoint) => {
      if (keypoint.score > 0.3) {
        ctx.beginPath();
        ctx.arc(keypoint.x, keypoint.y, 3, 0, 2 * Math.PI);
        ctx.fillStyle = "red";
        ctx.fill();
      }
    });

    const skeleton = [
      ["nose", "left_eye"],
      ["nose", "right_eye"],
      ["left_eye", "left_ear"],
      ["right_eye", "right_ear"],
      ["left_shoulder", "right_shoulder"],
      ["left_shoulder", "left_elbow"],
      ["right_shoulder", "right_elbow"],
      ["left_elbow", "left_wrist"],
      ["right_elbow", "right_wrist"],
      ["left_hip", "right_hip"],
      ["left_hip", "left_knee"],
      ["right_hip", "right_knee"],
      ["left_knee", "left_ankle"],
      ["right_knee", "right_ankle"],
    ];

    const keypointsMap = {};
    flippedKeypoints.forEach((kp) => {
      keypointsMap[kp.name] = kp;
    });

    skeleton.forEach(([partA, partB]) => {
      const kpA = keypointsMap[partA];
      const kpB = keypointsMap[partB];

      if (kpA && kpB && kpA.score > 0.2 && kpB.score > 0.2) {
        ctx.beginPath();
        ctx.moveTo(kpA.x, kpA.y);
        ctx.lineTo(kpB.x, kpB.y);
        ctx.strokeStyle = "blue";
        ctx.lineWidth = 2;
        ctx.stroke();
      }
    });
  };

  const handleExerciseChange = (exercise) => {
    setCurrentExercise(exercise);
    setPushupPosition("up"); // Reset pushup position
    setSquatPosition("up"); // Reset squat position
    isExerciseInProgressRef.current = false; // Reset progress flag
  };

  return (
    <>
      <h1>
        {currentExercise} Count: {exerciseCount[currentExercise.toLowerCase()]}
        {currentExercise === "Pushups" ? pushupPosition : squatPosition}
      </h1>
      <div>
        <button onClick={() => handleExerciseChange("Pushups")}>
          Push-ups
        </button>
        <button onClick={() => handleExerciseChange("Squats")}>Squats</button>
      </div>

      <div
        style={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          flexDirection: "column",
          position: "relative",
          width: "640px",
          height: "480px",
          textAlign: "center",
        }}
      >
        <Webcam
          ref={webcamRef}
          videoConstraints={{
            facingMode: "user",
            width: 640,
            height: 480,
          }}
          audio={false}
          screenshotFormat="image/jpeg"
          onUser MediaError={(e) => console.log("Webcam Error:", e)}
          style={{
            position: "absolute",
            top: 0,
            left: 0,
            width: "100%",
            height: "100%",
            transform: "scaleX(-1)",
            objectFit: "cover",
          }}
        />

        <canvas
          ref={canvasRef}
          style={{
            position: "absolute",
            top: 0,
            left: 0,
            width: "100%",
            height: "100%",
            backgroundColor: "transparent",
          }}
        />
      </div>
    </>
  );
};

export default ExerciseApp;